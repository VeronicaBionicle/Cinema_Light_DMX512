#include <TimerThree.h>
#include <boarddefs.h>
#include <IRremote.h>
#include <IRremoteInt.h>
#include <lib_dmx.h>
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>

void Timer_int();

// Коды кнопок пульта
#define BUTTON_UP 16736925  //Up
#define BUTTON_DOWN 16754775  //Down
#define BUTTON_STOP 16743045   //6
#define BUTTON_ON 16738455  //1
#define BUTTON_OFF 16750695  //2
#define BUTTON_50 16756815 //3
#define BUTTON_LIGHT 16724175 //4
#define BUTTON_DARK 16718055 //5
#define BUTTON_ALL_ZONES 16730805 //0
#define BUTTON_ZONE_1 16716015 //7
#define BUTTON_ZONE_2 16726215 //8
#define BUTTON_ZONE_3 16734885 //9
#define BUTTON_EMERGENCY 16728765 //*
#define BUTTON_OK 16712445
#define BUTTON_SETTINGS 16732845 //#
// (250 kbaud - 2 to 512 channels) Standard USITT DMX-512
#define    DMX512     (0)    
//pins
#define IR_PIN A0 // пин, к которому подключен IR приемник
IRrecv irrecv(IR_PIN); 

LiquidCrystal_I2C lcd(0x27,16,2);

int Menu = 0;
bool Exit = false;
bool Setting = false;
String Menu_option[4] = {"Max bright. set  ", "ON/OFF time        ", "LIGHT/DARK time ", "Exit settings   "};
                                                                       
int zone_pins[3] = {4,5,6};
//default timings
long int fast_time = 1500000; // 1.5 sec
long int slow_time = 7000000;  // 7 sec
long int period_fast_time = fast_time/255;
long int period_slow_time = slow_time/255;

int max_brightness[4] = {255, 255, 255, 255};
decode_results results;
int fade[3];

boolean Emergency = false;
boolean p50 = false;
int brightness_zone[3] = {0,0,0};
boolean zone_state[3] = {true, true, true};

int chosen_zone = 3;
int leds[3] = {12, 15, 18};

String Message = "OFF  ";
String Mes_br = "";
String Mes_time = "";

void setup() // процедура setup
{
  irrecv.enableIRIn();  // запускаем прием инфракрасного сигнала
  
  pinMode(zone_pins[0], OUTPUT);
  pinMode(zone_pins[1], OUTPUT);
  pinMode(zone_pins[2], OUTPUT);
  pinMode(IR_PIN, INPUT);

  ArduinoDmx1.set_tx_address(1);     
  ArduinoDmx1.set_tx_channels(21);  
  ArduinoDmx1.init_tx(DMX512);      
 
  Timer3.initialize();
  Timer3.attachInterrupt(Timer_int);
  
  lcd.init();                      // initialize the lcd
  lcd.backlight();
  lcd.clear();
  
  digitalWrite (zone_pins[0], HIGH); 
  
  for (auto i = 0; i <= 2; i++){
        lcd.setCursor(11+i*2, 0);
        lcd.print(i+1);};
}

void Timer_int(){
for (auto i = 0; i <= 2; i++){
      if (zone_state[i] == true) {
        if (p50 == false) {
          if (((brightness_zone[i] < max_brightness[i]) and (fade[i] == 1)) or (brightness_zone[i] > 0) and (fade[i] == -1)) {brightness_zone[i] += fade[i];};} else {
             if (((brightness_zone[i] < max_brightness[i]/2) and (fade[i] == 1)) or (brightness_zone[i] > max_brightness[i]/2) and (fade[i] == -1)) {brightness_zone[i] += fade[i];};
          };
      };
 };
};
  
void loop() {
  if (irrecv.decode(&results)) // main commands
  {
    switch(results.value){

      case BUTTON_SETTINGS:
        Timer3.stop();
        Setting = true;  
        break;
     
      case BUTTON_UP:
        p50 = false;
         for (auto i = 0; i <= 2; i++){
          if (zone_state[i] == true) {if (brightness_zone[i] < 255) brightness_zone[i] += 5;};
        };
        break;
        
      case BUTTON_DOWN:
        p50 = false;
        for (auto i = 0; i <= 2; i++){
          if (zone_state[i] == true) {if (brightness_zone[i] > 0) brightness_zone[i] -= 5;};
        };
        break;
        
      case BUTTON_ON:
        for (auto i = 0; i <= 2; i++){
          if (zone_state[i] == true) {fade[i] = 1;}
        };
        p50 = false;
        Timer3.setPeriod(period_fast_time);
        Timer3.restart();
        Message = "ON   ";
        break;
        
      case BUTTON_OFF:
        for (auto i = 0; i <= 2; i++){
          if (zone_state[i] == true) {fade[i] = -1;}
        };
        p50 = false;
        Timer3.setPeriod(period_fast_time);
        Timer3.restart();
        Message = "OFF  ";
        break;
        
      case BUTTON_LIGHT:
        for (auto i = 0; i <= 2; i++){
          if (zone_state[i] == true) {fade[i] = 1;}
        };
        p50 = false;
        Timer3.setPeriod(period_slow_time);
        Timer3.restart();
        Message = "LIGHT";
        break;
        
      case BUTTON_DARK:
        for (auto i = 0; i <= 2; i++){
          if (zone_state[i] == true) {fade[i] = -1;}
        };
        p50 = false;
        Timer3.setPeriod(period_slow_time);
        Timer3.restart();
        Message = "DARK ";
        break;
        
      case BUTTON_50:
        p50 = true;
        for (auto i = 0; i <= 2; i++){
          if (zone_state[i] == true) {
            if (brightness_zone[i] > max_brightness[i]/2) fade[i] = -1; else fade[i] = 1;
          };
        };
        Timer3.setPeriod(period_fast_time);
        Timer3.restart();
        Message = "50%  ";
        break;
   
      case BUTTON_ALL_ZONES:
        Timer3.stop();
        chosen_zone = 3;
        zone_state[0] = true;
        zone_state[1] = true;
        zone_state[2] = true;
        for (auto i = 0; i <= 2; i++){
          lcd.setCursor(11+i*2, 0);
          lcd.print(i+1);
        };
        break;
         
      case BUTTON_ZONE_1:
        Timer3.stop();
        zone_state[0] = true;
        zone_state[1] = false;
        zone_state[2] = false;
        chosen_zone = 0;
        lcd.setCursor(11,0);
        lcd.print("     ");
        lcd.setCursor(11+chosen_zone*2, 0);
        lcd.print(chosen_zone+1);
        break;
        
     case BUTTON_ZONE_2:
        Timer3.stop();
        zone_state[0] = false;
        zone_state[1] = true;
        zone_state[2] = false;
        chosen_zone = 1;
        lcd.setCursor(11,0);
        lcd.print("     ");
        lcd.setCursor(11+chosen_zone*2, 0);
        lcd.print(chosen_zone+1);
        break;
        
     case BUTTON_ZONE_3: 
        Timer3.stop();
        zone_state[0] = false;
        zone_state[1] = false;
        zone_state[2] = true;
        chosen_zone = 2;
        lcd.setCursor(11,0);
        lcd.print("     ");
        lcd.setCursor(11+chosen_zone*2, 0);
        lcd.print(chosen_zone+1);
        break;

     case BUTTON_STOP:
       Timer3.stop();
       Message = "STOP ";
       break;

    case BUTTON_EMERGENCY:
       Timer3.stop();
       for (auto i = 12; i <= 20; i++){ArduinoDmx1.TxBuffer[i] = 255;};
       Emergency = !Emergency;
       lcd.setCursor(0,0);
       lcd.print("ALARM");
       break;
        
     default: break;
    };
    irrecv.resume(); // принимаем следующий сигнал на ИК приемнике
  };
  
  if ((Emergency == false) and (Setting == false)) {
          for (auto i = 0; i <= 2; i++){
      if (zone_state[i] == true) { 
        ArduinoDmx1.TxBuffer[leds[i]] = brightness_zone[i];
        ArduinoDmx1.TxBuffer[leds[i]+1] = brightness_zone[i];
        ArduinoDmx1.TxBuffer[leds[i]+2] = brightness_zone[i];
      };
      
      Mes_br += brightness_zone[i];
      Mes_br += " ";
    };

    while (Mes_br.length() < 11){
     Mes_br += " ";
      };
  // Interface    
  lcd.setCursor(0,0);
  lcd.print(Message);
  lcd.setCursor(6,0);
  lcd.print("Zone:");
  lcd.setCursor(0,1);
  lcd.print("Br.: ");
  lcd.setCursor(5, 1);
  lcd.print(Mes_br);
  Mes_br = "";
  }
  else {
    if (Setting == true){ //if Setting was pushed
      Menu = 0;
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print("Settings menu");
      lcd.setCursor(0,1);
      lcd.print(Menu_option[Menu]);
      irrecv.resume();
      do {     
        if (irrecv.decode(&results)){
           switch(results.value){ //Menu
            
            case BUTTON_DOWN:
             if (Menu < 3) Menu++; else Menu = 0;
             lcd.setCursor(0,1);
             lcd.print(Menu_option[Menu]);
             break;
          
            case BUTTON_UP: 
             if (Menu > 0) Menu--; else Menu = 3;
             lcd.setCursor(0,1);
             lcd.print(Menu_option[Menu]);
             break;
        
            case BUTTON_OK: //choose option
              switch (Menu) {
                
                case 0: // changing max brightness
                  Exit = false;
                  lcd.clear();
                  lcd.setCursor(0,0);
                  lcd.print("Max bright. set  ");
                  lcd.setCursor(0,1);
                  lcd.print("Choose zone:    ");
                  irrecv.resume();
                  do {
                    if (irrecv.decode(&results)){
                    switch(results.value){  //choosing zone
                     
                      case BUTTON_ZONE_1:
                        chosen_zone = 0;
                        lcd.setCursor(0,1);
                        lcd.print("Choose zone:    ");
                        lcd.setCursor(13,1);
                        lcd.print("1  ");
                        break;
                      
                      case BUTTON_ZONE_2:
                        chosen_zone = 1;
                        lcd.setCursor(0,1);
                        lcd.print("Choose zone:    ");
                        lcd.setCursor(13,1);
                        lcd.print("2  ");
                        break;
                      
                      case BUTTON_ZONE_3:
                        chosen_zone = 2;
                        lcd.setCursor(0,1);
                        lcd.print("Choose zone:    ");
                        lcd.setCursor(13,1);
                        lcd.print("3  ");
                        break;
                      
                      case BUTTON_ALL_ZONES:
                        chosen_zone = 3;
                        lcd.setCursor(0,1);
                        lcd.print("Choose zone:    ");
                        lcd.setCursor(13,1);
                        lcd.print("All");
                        break;

                      case BUTTON_SETTINGS: //back to Settings menu
                        lcd.clear();
                        lcd.setCursor(0,0);
                        lcd.print("Settings menu");
                        lcd.setCursor(0,1);
                        lcd.print(Menu_option[Menu]);
                        Exit = true;
                        break;
                        
                      case BUTTON_OK:
                        Exit = false;
                        lcd.setCursor(0,0);
                        lcd.print("Max brightness: ");
                        lcd.setCursor(0,1);
                        lcd.print(max_brightness[chosen_zone]);
                        lcd.print(" ");
                        lcd.print(float(max_brightness[chosen_zone])*100/255);
                        lcd.print("%            ");
                        irrecv.resume();
                        do {
                    if (irrecv.decode(&results)){
                    switch(results.value){  //setting brightness
          
                      case BUTTON_UP:
                            if (max_brightness[chosen_zone] < 255) {
                              max_brightness[chosen_zone]++;
                              } else max_brightness[chosen_zone] = 0; 
                              lcd.setCursor(0,1);
                              lcd.print(max_brightness[chosen_zone]);
                              lcd.print(" ");
                              lcd.print(float(max_brightness[chosen_zone])*100/255);
                              lcd.print("%            ");
                              break;
                        
                      case BUTTON_DOWN:
                            if (max_brightness[chosen_zone] > 0) {
                              max_brightness[chosen_zone]--;
                              } else max_brightness[chosen_zone] = 255; 
                              lcd.setCursor(0,1);
                              lcd.print(max_brightness[chosen_zone]);
                              lcd.print(" ");
                              lcd.print(float(max_brightness[chosen_zone])*100/255);
                              lcd.print("%            ");
                              break;
                        
                      case BUTTON_OK: //saving result
                        lcd.clear();
                        lcd.setCursor(0,0);
                        lcd.print("Settings menu");
                        lcd.setCursor(0,1);
                        lcd.print(Menu_option[Menu]);
                        if (chosen_zone == 3) {
                          max_brightness[0]= max_brightness[3];
                          max_brightness[1]= max_brightness[3];
                          max_brightness[2]= max_brightness[3];
                          };
                        Exit = true;
                        break;
            
                      case BUTTON_SETTINGS: //brightness for all zones becomes default 255
                        lcd.clear();
                        lcd.setCursor(0,0);
                        lcd.print("Settings menu");
                        lcd.setCursor(0,1);
                        lcd.print(Menu_option[Menu]);
                        max_brightness[3] = 255;
                        max_brightness[0]= max_brightness[3];
                        max_brightness[1]= max_brightness[3];
                        max_brightness[2]= max_brightness[3];
                        Exit = true;
                        break;
                        }
                      irrecv.resume();  
                      }
                    } while (Exit == false);
                        break;
                      };
                    irrecv.resume();
                    };
                  } while (Exit == false);
                  
                  break;
                  
                case 1: //setting ON/OFF fade time
                  Exit = false;
                  lcd.clear();
                  lcd.setCursor(0,0);
                  lcd.print("ON/OFF time");
                  lcd.setCursor(0,1);
                  lcd.print("Fade time:     s");
                  lcd.setCursor(11,1);
                  Mes_time += fast_time/1000000;
                  Mes_time += ",";
                  Mes_time += fast_time/10000%100;
                  lcd.print(Mes_time);
                  Mes_time = "";
                  irrecv.resume();
                  do {
                    if (irrecv.decode(&results)){
                    switch(results.value){  //setting up ON/OFF time
                      
                      case BUTTON_UP:
                        if (fast_time < 20000000) fast_time += 250000; else fast_time = 0;
                        lcd.setCursor(0,1);
                        lcd.print("Fade time:     s");
                        lcd.setCursor(11,1);
                        Mes_time += fast_time/1000000;
                        Mes_time += ",";
                        Mes_time += fast_time/10000%100;
                        lcd.print(Mes_time);
                        Mes_time = "";
                        break;
                        
                      case BUTTON_DOWN:
                        if (fast_time > 0) fast_time -= 250000; else fast_time = 20000000;
                        lcd.setCursor(0,1);
                        lcd.print("Fade time:     s");
                        lcd.setCursor(11,1);
                        Mes_time += fast_time/1000000;
                        Mes_time += ",";
                        Mes_time += fast_time/10000%100;
                        lcd.print(Mes_time);
                        Mes_time = "";
                        break;
                      
                      case BUTTON_OK: //saving result
                        period_fast_time = fast_time/255;
                        lcd.clear();
                        lcd.setCursor(0,0);
                        lcd.print("Settings menu");
                        lcd.setCursor(0,1);
                        lcd.print(Menu_option[Menu]);
                        Exit = true;
                        break;
            
                    case BUTTON_SETTINGS: //ON/OFF fade time becomes default 1.5 s
                        fast_time = 1500000;
                        period_fast_time = fast_time/255;
                        Exit = true;
                        lcd.clear();
                        lcd.setCursor(0,0);
                        lcd.print("Settings menu");
                        lcd.setCursor(0,1);
                        lcd.print(Menu_option[Menu]);
                        break;
                      };  
                    irrecv.resume();
                    };
                    } while (Exit == false);
                  break;
                  
                case 2: //setting LIGHT/DARK fade time
                  Exit = false;
                  lcd.clear();
                  lcd.setCursor(0,0);
                  lcd.print("LIGHT/DARK time");
                  lcd.setCursor(0,1);
                  lcd.print("Fade time:     s");
                  lcd.setCursor(11,1);
                  Mes_time += slow_time/1000000;
                  Mes_time += ",";
                  Mes_time += slow_time/10000%100;
                  lcd.print(Mes_time);
                  Mes_time = "";
                  irrecv.resume();
                  do {
                    if (irrecv.decode(&results)){
                    switch(results.value){  //setting up LIGHT/DARK time
                      
                      case BUTTON_UP:
                        if (slow_time < 20000000) slow_time += 250000; else slow_time = 0;
                        lcd.setCursor(0,1);
                        lcd.print("Fade time:     s");
                        lcd.setCursor(11,1);
                        Mes_time += fast_time/1000000;
                        Mes_time += ",";
                        Mes_time += fast_time/10000%100;
                        lcd.print(Mes_time);
                        Mes_time = "";
                        break;
                        
                      case BUTTON_DOWN:
                        if (slow_time > 0) slow_time -= 250000; else slow_time = 20000000;
                        lcd.setCursor(0,1);
                        lcd.print("Fade time:     s");
                        lcd.setCursor(11,1);
                        Mes_time += slow_time/1000000;
                        Mes_time += ",";
                        Mes_time += slow_time/10000%100;
                        lcd.print(Mes_time);
                        Mes_time = "";
                        break;
                      
                      case BUTTON_OK: //saving result
                        period_slow_time = slow_time/255;
                        lcd.clear();
                        lcd.setCursor(0,0);
                        lcd.print("Settings menu");
                        lcd.setCursor(0,1);
                        lcd.print(Menu_option[Menu]);
                        Exit = true;
                        break;
            
                      case BUTTON_SETTINGS: //LIGHT/DARK fade time becomes default 7 s
                        slow_time = 7000000;
                        period_slow_time = slow_time/255;
                        Exit = true;
                        lcd.clear();
                        lcd.setCursor(0,0);
                        lcd.print("Settings menu");
                        lcd.setCursor(0,1);
                        lcd.print(Menu_option[Menu]);
                        break;
                      };  
                    irrecv.resume();
                    };
                    } while (Exit == false);
                  break;
                
                case 3: //exit settings menu
                  Exit = true;
                  Setting = false;
                  lcd.clear();
                  break;
                };
              break;
            
              case BUTTON_SETTINGS: //exit settings menu
                Setting = false;
                Exit = true;
                lcd.setCursor(0,0);
                lcd.clear();
                break;
               
            };
             irrecv.resume(); // принимаем следующий сигнал на ИК приемнике
          };   
        } while (Setting == true);
      };
    };
}
