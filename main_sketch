#include <TimerOne.h>
#include <TimerThree.h>
#include <boarddefs.h>
#include <IRremote.h>
#include <IRremoteInt.h>
#include <lib_dmx.h>
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>
#include <EEPROM2.h>

#define hi_fast_time 3
#define low_fast_time 4 
#define hi_slow_time 5
#define low_slow_time 6

byte hi, low;

// IR-remote buttons` codes
#define BUTTON_UP 16736925  //Up
#define BUTTON_DOWN 16754775  //Down
#define BUTTON_STOP 16743045   //6
#define BUTTON_ON 16738455  //1
#define BUTTON_OFF 16750695  //2
#define BUTTON_50 16756815 //3
#define BUTTON_LIGHT 16724175 //4
#define BUTTON_DARK 16718055 //5
#define BUTTON_ALL_ZONES 16730805 //0
#define BUTTON_ZONE_1 16716015 //7
#define BUTTON_ZONE_2 16726215 //8
#define BUTTON_ZONE_3 16734885 //9
#define BUTTON_EMERGENCY 16728765 //*
#define BUTTON_OK 16712445
#define BUTTON_SETTINGS 16732845 //#
// (250 kbaud - 2 to 512 channels) Standard USITT DMX-512
#define    DMX512     (0)    
//pins
#define IR_PIN A0 // IR-receiver pin
IRrecv irrecv(IR_PIN); 

LiquidCrystal_I2C lcd(0x27,16,2);

int Menu = 0;
bool Exit = false;
bool Setting = false;
String Menu_option[5] = {"Max bright. set  ", "ON/OFF time        ", "LIGHT/DARK time ", "View settings   ","Exit settings   "};
                                                                       
int zone_pins[3] = {4,5,6};
//default timings
long int fast_time;
long int slow_time;  // 7 sec
long int period_fast_time;
long int period_slow_time;

int max_brightness[4] = {255, 255, 255, 255};
decode_results results;
int fade[3];

boolean Emergency = false;
boolean p50 = false;
int brightness_zone[3] = {0,0,0};
boolean zone_state[3] = {true, true, true};

int chosen_zone = 3;
int leds[3] = {12, 15, 18};

String Message = "OFF  ";
String Mes_br = "";
String Mes_time = "";

int Button_state;
bool Keyboard_state = false;
//int Mass[5][4] = {{0,1,2,3},{4,5,6,7},{8,9,10,11},{0,12,0,0},{0,13,14,0} };
int Mass[5][4] = {{BUTTON_ALL_ZONES,BUTTON_ON,BUTTON_OFF,BUTTON_50},{BUTTON_LIGHT,BUTTON_DARK,BUTTON_STOP,BUTTON_ZONE_1},{BUTTON_ZONE_2,BUTTON_ZONE_3,BUTTON_OK,BUTTON_SETTINGS},{0,BUTTON_UP,0,0},{0,BUTTON_EMERGENCY,BUTTON_DOWN,0} };
int portState[5] = {1,2,4,8,16};

int Res; 
void EEPROM_brightness_data_write(){
  for (auto i = 0; i <=2; i++){
    EEPROM.write(i, max_brightness[i]); 
  };
};

void EEPROM_slow_time_data_write(){
  hi = highByte(slow_time/10000);
  low = lowByte(slow_time/10000);
  EEPROM.write(low_slow_time, low); 
  EEPROM.write(hi_slow_time, hi);
};

void EEPROM_fast_time_data_write(){
  hi = highByte(fast_time/10000);
  low = lowByte(fast_time/10000);
  EEPROM.write(low_fast_time, low); 
  EEPROM.write(hi_fast_time, hi);
};

void EEPROM_data_read(){
  for (auto i = 0; i <=2; i++){
    max_brightness[i] = EEPROM.read(i);
    };
    
  hi = EEPROM.read(hi_slow_time);
  low = EEPROM.read(low_slow_time);  
  slow_time = word(hi, low);
  slow_time *= 10000;
  
  hi = EEPROM.read(hi_fast_time);
  low = EEPROM.read(low_fast_time); 
  fast_time = word(hi, low);
  fast_time *= 10000;
};

void setup()
{ 
  irrecv.enableIRIn();
  
  pinMode(zone_pins[0], OUTPUT);
  pinMode(zone_pins[1], OUTPUT);
  pinMode(zone_pins[2], OUTPUT);
  pinMode(IR_PIN, INPUT);

  ArduinoDmx1.set_tx_address(1);     
  ArduinoDmx1.set_tx_channels(21);  
  ArduinoDmx1.init_tx(DMX512);      
 
  Timer3.initialize();
  Timer3.attachInterrupt(Timer_int);
  
  lcd.init();                      // initialize the lcd
  lcd.backlight();
  lcd.clear();

  EEPROM_data_read();

  period_slow_time = slow_time/255;
  period_fast_time = fast_time/255;
  digitalWrite (zone_pins[0], HIGH);

  DDRC = 0b00011111;
  DDRA = 0b00000000;
  Timer1.initialize(150000);
  Timer1.attachInterrupt(Keyboard_int);
  
  for (auto i = 0; i <= 2; i++){
        lcd.setCursor(11+i*2, 0);
        lcd.print(i+1);};
}

void Timer_int(){
for (auto i = 0; i <= 2; i++){
      if (zone_state[i] == true) {
        if (p50 == false) {
          if (((brightness_zone[i] < max_brightness[i]) and (fade[i] == 1)) or (brightness_zone[i] > 0) and (fade[i] == -1)) {brightness_zone[i] += fade[i];};} else {
             if (((brightness_zone[i] < max_brightness[i]/2) and (fade[i] == 1)) or (brightness_zone[i] > max_brightness[i]/2) and (fade[i] == -1)) {brightness_zone[i] += fade[i];};
          };
      };
 };
};

void Keyboard_int(){
  for(auto i=0; i<5; i++)
  { 
    PORTC=portState[i];
    for(auto j=0; j<4; j++)
    {
      if(((PINA==portState[j])))
      {
        Keyboard_state = true;
        Button_state = Mass[i][j];                                  
      }
    }                          
  }  
};
 
void loop() {
  if (irrecv.decode(&results) or Keyboard_state) // main commands
  {
    if (irrecv.decode(&results)) Res = results.value; else Res = Button_state;
    switch(Res){
      case BUTTON_SETTINGS:
        Timer3.stop();
        Setting = true;  
        break;
     
      case BUTTON_UP:
      Keyboard_state = false;
        p50 = false;
         for (auto i = 0; i <= 2; i++){
          if (zone_state[i] == true) {if (brightness_zone[i] < 255) brightness_zone[i] += 5;};
        };
        break;
        
      case BUTTON_DOWN:
      Keyboard_state = false;
        p50 = false;
        for (auto i = 0; i <= 2; i++){
          if (zone_state[i] == true) {if (brightness_zone[i] > 0) brightness_zone[i] -= 5;};
        };
        break;
        
      case BUTTON_ON:
        for (auto i = 0; i <= 2; i++){
          if (zone_state[i] == true) {fade[i] = 1;}
        };
        p50 = false;
        Timer3.setPeriod(period_fast_time);
        Timer3.restart();
        Message = "ON   ";
        break;
        
      case BUTTON_OFF:
        for (auto i = 0; i <= 2; i++){
          if (zone_state[i] == true) {fade[i] = -1;}
        };
        p50 = false;
        Timer3.setPeriod(period_fast_time);
        Timer3.restart();
        Message = "OFF  ";
        break;
        
      case BUTTON_LIGHT:
        for (auto i = 0; i <= 2; i++){
          if (zone_state[i] == true) {fade[i] = 1;}
        };
        p50 = false;
        Timer3.setPeriod(period_slow_time);
        Timer3.restart();
        Message = "LIGHT";
        break;
        
      case BUTTON_DARK:
        for (auto i = 0; i <= 2; i++){
          if (zone_state[i] == true) {fade[i] = -1;}
        };
        p50 = false;
        Timer3.setPeriod(period_slow_time);
        Timer3.restart();
        Message = "DARK ";
        break;
        
      case BUTTON_50:
        p50 = true;
        for (auto i = 0; i <= 2; i++){
          if (zone_state[i] == true) {
            if (brightness_zone[i] > max_brightness[i]/2) fade[i] = -1; else fade[i] = 1;
          };
        };
        Timer3.setPeriod(period_fast_time);
        Timer3.restart();
        Message = "50%  ";
        break;
   
      case BUTTON_ALL_ZONES:
        Timer3.stop();
        chosen_zone = 3;
        zone_state[0] = true;
        zone_state[1] = true;
        zone_state[2] = true;
        for (auto i = 0; i <= 2; i++){
          lcd.setCursor(11+i*2, 0);
          lcd.print(i+1);
        };
        break;
         
      case BUTTON_ZONE_1:
        Timer3.stop();
        zone_state[0] = true;
        zone_state[1] = false;
        zone_state[2] = false;
        chosen_zone = 0;
        lcd.setCursor(11,0);
        lcd.print("     ");
        lcd.setCursor(11+chosen_zone*2, 0);
        lcd.print(chosen_zone+1);
        break;
        
     case BUTTON_ZONE_2:
        Timer3.stop();
        zone_state[0] = false;
        zone_state[1] = true;
        zone_state[2] = false;
        chosen_zone = 1;
        lcd.setCursor(11,0);
        lcd.print("     ");
        lcd.setCursor(11+chosen_zone*2, 0);
        lcd.print(chosen_zone+1);
        break;
        
     case BUTTON_ZONE_3: 
        Timer3.stop();
        zone_state[0] = false;
        zone_state[1] = false;
        zone_state[2] = true;
        chosen_zone = 2;
        lcd.setCursor(11,0);
        lcd.print("     ");
        lcd.setCursor(11+chosen_zone*2, 0);
        lcd.print(chosen_zone+1);
        break;

     case BUTTON_STOP:
       Timer3.stop();
       Message = "STOP ";
       break;

    case BUTTON_EMERGENCY:
       Keyboard_state = false;
       Timer3.stop();
       for (auto i = 12; i <= 20; i++){ArduinoDmx1.TxBuffer[i] = 255;};
       Emergency = !Emergency;
       lcd.setCursor(0,0);
       lcd.print("ALARM");
       break;
        
     default: break;
    };
    irrecv.resume(); // принимаем следующий сигнал на ИК приемнике
    Keyboard_state = false;
  };

  if ((Emergency == false) and (Setting == false)) {
    for (auto i = 0; i <= 2; i++){
      if (zone_state[i] == true) { 
        ArduinoDmx1.TxBuffer[leds[i]] = brightness_zone[i];
        ArduinoDmx1.TxBuffer[leds[i]+1] = brightness_zone[i];
        ArduinoDmx1.TxBuffer[leds[i]+2] = brightness_zone[i];
      };
      Mes_br += brightness_zone[i];
      Mes_br += " ";
    };

    while (Mes_br.length() < 11){
     Mes_br += " ";
      };
  // Interface    
  lcd.setCursor(0,0);
  lcd.print(Message);
  lcd.setCursor(6,0);
  lcd.print("Zone:");
  lcd.setCursor(0,1);
  lcd.print("Br.: ");
  lcd.setCursor(5, 1);
  lcd.print(Mes_br);
  Mes_br = "";
  }
  else {
    if (Setting == true){ //if Setting was pushed
      Menu = 0;
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print("Settings menu");
      lcd.setCursor(0,1);
      lcd.print(Menu_option[Menu]);
      irrecv.resume();
      Keyboard_state = false;
      do {     
        if (irrecv.decode(&results) or Keyboard_state) // main commands
        {
          if (irrecv.decode(&results)) Res = results.value; else Res = Button_state;
            switch(Res){ //Menu
            
            case BUTTON_DOWN:
            Keyboard_state = false;
             if (Menu < 4) Menu++; else Menu = 0;
             lcd.setCursor(0,1);
             lcd.print(Menu_option[Menu]);
             break;
          
            case BUTTON_UP: 
            Keyboard_state = false;
             if (Menu > 0) Menu--; else Menu = 4;
             lcd.setCursor(0,1);
             lcd.print(Menu_option[Menu]);
             break;
        
            case BUTTON_OK: //choose option
           
              switch (Menu) {
                
                case 0: // changing max brightness
                  Exit = false;
                  lcd.clear();
                  lcd.setCursor(0,0);
                  lcd.print("Max bright. set  ");
                  lcd.setCursor(0,1);
                  lcd.print("Choose zone:    ");
                  irrecv.resume();
                  Keyboard_state = false;
                  do {
                    if (irrecv.decode(&results) or Keyboard_state) // main commands
                    {
                      if (irrecv.decode(&results)) Res = results.value; else Res = Button_state;
                      switch(Res){  //choosing zone
                     
                      case BUTTON_ZONE_1:
                        chosen_zone = 0;
                        lcd.setCursor(0,1);
                        lcd.print("Choose zone:    ");
                        lcd.setCursor(13,1);
                        lcd.print("1  ");
                        break;
                      
                      case BUTTON_ZONE_2:
                        chosen_zone = 1;
                        lcd.setCursor(0,1);
                        lcd.print("Choose zone:    ");
                        lcd.setCursor(13,1);
                        lcd.print("2  ");
                        break;
                      
                      case BUTTON_ZONE_3:
                        chosen_zone = 2;
                        lcd.setCursor(0,1);
                        lcd.print("Choose zone:    ");
                        lcd.setCursor(13,1);
                        lcd.print("3  ");
                        break;
                      
                      case BUTTON_ALL_ZONES:
                        chosen_zone = 3;
                        lcd.setCursor(0,1);
                        lcd.print("Choose zone:    ");
                        lcd.setCursor(13,1);
                        lcd.print("All");
                        break;

                      case BUTTON_SETTINGS: //back to Settings menu
                        lcd.clear();
                        lcd.setCursor(0,0);
                        lcd.print("Settings menu");
                        lcd.setCursor(0,1);
                        lcd.print(Menu_option[Menu]);
                        Exit = true;
                        break;
                        
                      case BUTTON_OK:
                        Exit = false;
                        lcd.setCursor(0,0);
                        lcd.print("Max brightness: ");
                        lcd.setCursor(0,1);
                        lcd.print(max_brightness[chosen_zone]);
                        lcd.print(" ");
                        lcd.print(float(max_brightness[chosen_zone])*100/255);
                        lcd.print("%            ");
                        irrecv.resume();
                        Keyboard_state = false;
                        do {
                          if (irrecv.decode(&results) or Keyboard_state) // main commands
                          {
                            if (irrecv.decode(&results)) Res = results.value; else Res = Button_state;
                            switch(Res){  //setting brightness
          
                              case BUTTON_UP:
                              Keyboard_state = false;
                                    if (max_brightness[chosen_zone] < 255) {
                                      max_brightness[chosen_zone]++;
                                      } else max_brightness[chosen_zone] = 0; 
                                      lcd.setCursor(0,1);
                                      lcd.print(max_brightness[chosen_zone]);
                                      lcd.print(" ");
                                      lcd.print(float(max_brightness[chosen_zone])*100/255);
                                      lcd.print("%            ");
                                      break;
                                
                              case BUTTON_DOWN:
                              Keyboard_state = false;
                                    if (max_brightness[chosen_zone] > 0) {
                                      max_brightness[chosen_zone]--;
                                      } else max_brightness[chosen_zone] = 255; 
                                      lcd.setCursor(0,1);
                                      lcd.print(max_brightness[chosen_zone]);
                                      lcd.print(" ");
                                      lcd.print(float(max_brightness[chosen_zone])*100/255);
                                      lcd.print("%            ");
                                      break;
                                
                              case BUTTON_OK: //saving result
                                lcd.clear();
                                lcd.setCursor(0,0);
                                lcd.print("Settings menu");
                                lcd.setCursor(0,1);
                                lcd.print(Menu_option[Menu]);
                                if (chosen_zone == 3) {
                                  max_brightness[0]= max_brightness[3];
                                  max_brightness[1]= max_brightness[3];
                                  max_brightness[2]= max_brightness[3];
                                  };
                                EEPROM_brightness_data_write();
                                Exit = true;
                                break;
                    
                              case BUTTON_SETTINGS: //brightness for all zones becomes default 255
                                lcd.clear();
                                lcd.setCursor(0,0);
                                lcd.print("Settings menu");
                                lcd.setCursor(0,1);
                                lcd.print(Menu_option[Menu]);
                                max_brightness[3] = 255;
                                max_brightness[0]= max_brightness[3];
                                max_brightness[1]= max_brightness[3];
                                max_brightness[2]= max_brightness[3];
                                EEPROM_brightness_data_write();
                                Exit = true;
                                break;
                                }
                      irrecv.resume();
                      Keyboard_state = false;  
                      }
                    } while (Exit == false);
                        break;
                      };
                    irrecv.resume();
                    Keyboard_state = false;
                    };
                  } while (Exit == false);
                  
                  break;
                  
                case 1: //setting ON/OFF fade time
                  Exit = false;
                  lcd.clear();
                  lcd.setCursor(0,0);
                  lcd.print("ON/OFF time");
                  lcd.setCursor(0,1);
                  lcd.print("Fade time:     s");
                  lcd.setCursor(10,1);
                  Mes_time += fast_time/1000000;
                  Mes_time += ",";
                  Mes_time += fast_time/10000%100;
                  lcd.print(Mes_time);
                  Mes_time = "";
                  irrecv.resume();
                  Keyboard_state = false;
                  do {
                  if (irrecv.decode(&results) or Keyboard_state) // main commands
                  {
                    if (irrecv.decode(&results)) Res = results.value; else Res = Button_state;
                    switch(Res){  //setting up ON/OFF time
                      
                      case BUTTON_UP:
                      Keyboard_state = false;
                        if (fast_time < 60000000) fast_time += 250000; else fast_time = 0;
                        lcd.setCursor(0,1);
                        lcd.print("Fade time:     s");
                        lcd.setCursor(10,1);
                        Mes_time += fast_time/1000000;
                        Mes_time += ",";
                        Mes_time += fast_time/10000%100;
                        lcd.print(Mes_time);
                        Mes_time = "";
                        break;
                        
                      case BUTTON_DOWN:
                      Keyboard_state = false;
                        if (fast_time > 0) fast_time -= 250000; else fast_time = 60000000;
                        lcd.setCursor(0,1);
                        lcd.print("Fade time:     s");
                        lcd.setCursor(10,1);
                        Mes_time += fast_time/1000000;
                        Mes_time += ",";
                        Mes_time += fast_time/10000%100;
                        lcd.print(Mes_time);
                        Mes_time = "";
                        break;
                      
                      case BUTTON_OK: //saving result
                        period_fast_time = fast_time/255;
                        EEPROM_fast_time_data_write();
                        lcd.clear();
                        lcd.setCursor(0,0);
                        lcd.print("Settings menu");
                        lcd.setCursor(0,1);
                        lcd.print(Menu_option[Menu]);
                        Exit = true;
                        break;
            
                    case BUTTON_SETTINGS: //ON/OFF fade time becomes default 1 s
                        fast_time = 1000000;
                        period_fast_time = fast_time/255;
                        EEPROM_fast_time_data_write();
                        Exit = true;
                        lcd.clear();
                        lcd.setCursor(0,0);
                        lcd.print("Settings menu");
                        lcd.setCursor(0,1);
                        lcd.print(Menu_option[Menu]);
                        break;
                      };  
                    irrecv.resume();
                    Keyboard_state = false;
                    };
                    } while (Exit == false);
                  break;
                  
                case 2: //setting LIGHT/DARK fade time
                  Exit = false;
                  lcd.clear();
                  lcd.setCursor(0,0);
                  lcd.print("LIGHT/DARK time");
                  lcd.setCursor(0,1);
                  lcd.print("Fade time:     s");
                  lcd.setCursor(10,1);
                  Mes_time += slow_time/1000000;
                  Mes_time += ",";
                  Mes_time += slow_time/10000%100;
                  lcd.print(Mes_time);
                  Mes_time = "";
                  irrecv.resume();
                  Keyboard_state = false;
                  do {
                  if (irrecv.decode(&results) or Keyboard_state) // main commands
                  {
                    if (irrecv.decode(&results)) Res = results.value; else Res = Button_state;
                      switch(Res){  //setting up LIGHT/DARK time
                      
                      case BUTTON_UP:
                      Keyboard_state = false;
                        if (slow_time < 60000000) slow_time += 250000; else slow_time = 0;
                        lcd.setCursor(0,1);
                        lcd.print("Fade time:     s");
                        lcd.setCursor(10,1);
                        Mes_time += slow_time/1000000;
                        Mes_time += ",";
                        Mes_time += slow_time/10000%100;
                        lcd.print(Mes_time);
                        Mes_time = "";
                        
                        break;
                        
                      case BUTTON_DOWN:
                      Keyboard_state = false;
                        if (slow_time > 0) slow_time -= 250000; else slow_time = 60000000;
                        lcd.setCursor(0,1);
                        lcd.print("Fade time:     s");
                        lcd.setCursor(10,1);
                        Mes_time += slow_time/1000000;
                        Mes_time += ",";
                        Mes_time += slow_time/10000%100;
                        lcd.print(Mes_time);
                        Mes_time = "";
                       
                        break;
                      
                      case BUTTON_OK: //saving result
                        period_slow_time = slow_time/255;
                        EEPROM_slow_time_data_write();
                        lcd.clear();
                        lcd.setCursor(0,0);
                        lcd.print("Settings menu");
                        lcd.setCursor(0,1);
                        lcd.print(Menu_option[Menu]);
                        Exit = true;
                        break;
            
                      case BUTTON_SETTINGS: //LIGHT/DARK fade time becomes default 10 s
                        slow_time = 10000000;
                        period_slow_time = slow_time/255;
                        EEPROM_slow_time_data_write();
                        Exit = true;
                        lcd.clear();
                        lcd.setCursor(0,0);
                        lcd.print("Settings menu");
                        lcd.setCursor(0,1);
                        lcd.print(Menu_option[Menu]);
                        break;
                      };  
                    irrecv.resume();
                    Keyboard_state = false;
                    };
                    } while (Exit == false);
                  break;

                  case 3:
                  Exit = false;
                  lcd.clear();
                  lcd.setCursor(0,0);
                  lcd.print("MaxBr");
                  for (auto i = 0; i <= 2; i++) {
                    lcd.print(max_brightness[i]);
                    lcd.print(" ");
                    };
                  lcd.setCursor(0,1);
                  lcd.print("Time:");
                  lcd.setCursor(6,1);
                  Mes_time += fast_time/1000000;
                  Mes_time += ",";
                  Mes_time += fast_time/10000%100;
                  Mes_time += " ";
                  Mes_time += slow_time/1000000;
                  Mes_time += ",";
                  Mes_time += slow_time/10000%100;
                  lcd.print(Mes_time);
                  Mes_time = "";
                  irrecv.resume();
                  Keyboard_state = false;
                  do {
                    if (irrecv.decode(&results) or Keyboard_state) // main commands
                    {
                    if (irrecv.decode(&results)) Res = results.value; else Res = Button_state;
                     switch(Res){
                      
                      case BUTTON_OK:
                        lcd.clear();
                        lcd.setCursor(0,0);
                        lcd.print("Settings menu");
                        lcd.setCursor(0,1);
                        lcd.print(Menu_option[Menu]);
                        Exit = true;
                        break;
                        
                      case BUTTON_SETTINGS:
                        lcd.clear();
                        lcd.setCursor(0,0);
                        lcd.print("Settings menu");
                        lcd.setCursor(0,1);
                        lcd.print(Menu_option[Menu]);
                        Exit = true;
                        break;
                        
                      };  
                    irrecv.resume();
                    Keyboard_state = false;
                    };
                    } while (Exit == false);
                break;
                
                case 4: //exit settings menu
                  Exit = true;
                  Setting = false;
                  lcd.clear();
                  break;
                };
              break;
            
              case BUTTON_SETTINGS: //exit settings menu
                Setting = false;
                Exit = true;
                lcd.setCursor(0,0);
                lcd.clear();
                break;
               
            };
             irrecv.resume(); // принимаем следующий сигнал на ИК приемнике
             Keyboard_state = false;
          };   
        } while (Setting == true);
      };
    };
}
